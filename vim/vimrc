" ========== Vim Basic Settings ============="

" Pathogen settings.
filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#infect()
Helptags
filetype plugin indent on

set nocompatible
set modelines=0

" Indenting settings.
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set smarttab
set autoindent

set encoding=utf-8
set scrolloff=3
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
"set visualbell
syntax on

set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2

"set relativenumber
set number
set norelativenumber

set lazyredraw
set matchtime=3

" Changing Leader Key
let mapleader = ","

" Set title to window
set title 

" Toggle to disable autoindent
set pastetoggle=<F4>

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE '
    en
    return ''
endfunction

hi User1 guifg=#eea040 guibg=#222922 ctermbg=17
hi User2 guifg=#dd3333 guibg=#222922 ctermbg=17
hi User3 guifg=#ff66ff guibg=#222922 ctermbg=17
hi User4 guifg=#a0ee40 guibg=#222922 ctermbg=17
hi User5 guifg=#eeee40 guibg=#222922 ctermbg=17

set statusline=
set statusline +=%1*\ %n\ %*            "buffer number
set statusline +=%5*%{&ff}%*            "file format
set statusline +=%3*%y%*                "file type
set statusline +=%4*\ %<%F%*            "full path
set statusline +=%2*%m%*                "modified flag
"set statusline +=%{HasPaste()}         "paste flag
set statusline +=%1*%=%5l%*             "current line
set statusline +=%2*/%L%*               "total lines

set backupskip=/tmp/*,/private/tmp/*"

" Enable Mouse
set mouse=a

" Don't show intro message when starting
set shortmess=atI

" Settings for Searching and Moving
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
"clear highlights
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %


" Make Vim handle long lines nicely.
set wrap
set textwidth=79
set formatoptions=qrn1
"set colorcolumn=79

" Do not display whitespace characters
"set list
set listchars=tab:▸\ ,eol:¬

" Disable help key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Map : to ; in command mode.
nnoremap ; :

" Leader Key mappings
" ,W Remove trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" ,ft Fold tag, helpful for HTML editing.
nnoremap <leader>ft vatzf

" ,q Re-hardwrap Paragraph
nnoremap <leader>q gqip

" ,v Select just pasted text.
nnoremap <leader>v V`]

" ,ev Shortcut to edit .vimrc file on the fly on a vertical window.
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" ,w save current file
nnoremap <leader>w <ESC>:w<cr>

" Home key moves to beginning of text instead of column 0
inoremap <home> <c-o>^

" Resize split when the window is resized
au VimResized * :wincmd =

" Wildmenu completion "
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn " Version Controls"
set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
set wildignore+=*.spl "Compiled speolling world list"
set wildignore+=*.sw? "Vim swap files"
set wildignore+=*.DS_Store "OSX"
set wildignore+=*.luac "Lua byte code"
set wildignore+=*.pyc "Python Object codes"
set wildignore+=*.orig "Merge resolution files"

" Make Sure that Vim returns to the same line when we reopen a file
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \ execute 'normal! g`"zvzz' |
        \ endif
augroup END

" Treat .json files as .js
autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
" Treat .ino files as .cpp
autocmd BufNewFile,BufRead *.ino setfiletype arduino syntax=cpp

" Move lines
nnoremap <C-S-down> :m .+1<CR>==
nnoremap <C-S-up> :m .-2<CR>==
inoremap <C-S-down> <Esc>:m .+1<CR>==gi
inoremap <C-S-up> <Esc>:m .-2<CR>==gi
vnoremap <C-S-down> :m '>+1<CR>gv=gv
vnoremap <C-S-up> :m '<-2<CR>gv=gv

" Quoting
"   single quote word
nnoremap qw :silent! normal "zyiw<Esc>:let @z="'".@z."'"<CR>cw<c-r>z<Esc>b
"   double quote word
nnoremap qd :silent! normal "zyiw<Esc>:let @z="\"".@z."\""<CR>cw<c-r>z<Esc>b
"   single and double quote visual selection
vmap <silent> qw :call Quote("'")<CR>
vmap <silent> qd :call Quote('"')<CR>
function! Quote(quote)
  let save = @"
  silent normal gvy
  let @" = a:quote . @" . a:quote
  silent normal gvp
  let @" = save
endfunction

" =========== END Basic Vim Settings ===========

" =========== Gvim Settings =============

if has("gui_running")
    set guitablabel=%-0.12t%M
    set guioptions-=T "toolbar off
    set guioptions+=r "scrollbars enabled
    "set guioptions-=L
    set guioptions+=a
    set guioptions-=m "menu disabled
    colorscheme badwolf
    "windows font
    "set guifont=Consolas:h9
	"linux font
	set guifont=Inconsolata\ 12
else
    set t_Co=256
    colorscheme badwolf
    "fix ctrl-arrow keys with putty
    map <ESC>[D <C-Left>
    map <ESC>[C <C-Right>
    map <ESC>[A <C-Up>
    map <ESC>[B <C-Down>
    map! <ESC>[D <C-Left>
    map! <ESC>[C <C-Right>
    map! <ESC>[A <C-Up>
    map! <ESC>[B <C-Down>
endif


" ========== END Gvim Settings ==========


" ========== Plugin Settings =========="

" NERDTree
nnoremap <F3> :NERDTreeToggle<cr>
let NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$', '\.swp$']
let NERDTreeChDirMode = 2

" ctrlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
noremap <c-b> :CtrlPBuffer<cr>

" MiniBufExplorer
nnoremap <silent> <F2> :MBEToggle<cr>
inoremap <silent> <F2> <ESC>:MBEToggle<cr>i
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplorerAutoStart = 0
let g:miniBufExplCycleArround = 1
" normal next/prev
"noremap <C-TAB>   :MBEbn<CR>
"noremap <C-S-TAB> :MBEbp<CR>
" most recently used next/prev
noremap <C-TAB>   :MBEbf<CR>
noremap <C-S-TAB> :MBEbb<CR>

" SuperTab
"let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
"let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
"let g:SuperTabContextDiscoverDiscovery = ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"]
let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

" DelimitMate
let delimitMate_expand_cr = 1

" Tagbar
nnoremap <silent> <F10> :TagbarToggle<cr>
nnoremap <silent> <F9> :TagbarOpen fj<cr>

" Jedi
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#use_splits_not_buffers = "right"
let g:jedi#show_call_signatures = 0 "sometimes buggy

" Syntastic 
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_always_populate_loc_list = 1
nnoremap <F11> :w<cr>:SyntasticCheck<cr>:Errors<cr>
inoremap <F11> <ESC>:w<cr>:SyntasticCheck<cr>:Errors<cr>
 
" Ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

"
" =========== END Plugin Settings =========="
"
